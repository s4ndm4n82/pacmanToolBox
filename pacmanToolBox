#!/usr/bin/env bash


################################################################################
#                                                                              #
#                                                                              #
#                               pacmanToolBox                                 #
#                                                                              #
# Created By: S4NDM4N                                           Version: 0.0.1 #
################################################################################

#To echo the messages
printLine(){ echo "$@" >&2 ; }

#Sources in  my shared library and checks for the shared script.
checkShared(){
    local LIB_SHRD_SCRIPT=/home/s4ndm4n/MEGA/GitRepoShare/Repos/sharedLib/sharedFunctionsLib

    if [ ! -f $LIB_SHRD_SCRIPT ] ; then
        printLine "Shared function library used for this script is missing."
        exit 1
    fi

    #Imports in all the goodness from the eos-shared lib.
    #shellcheck source=/dev/null
    source $LIB_SHRD_SCRIPT

    export -f yadRunCmd
    export -f runTerm
    export -f callTerminal
}

#checkShared # Calling the above funtion so rest of the app runs


#Check su or sudo available.
sudoCheck(){
    
    local chkSudo
    local chkSu

    chkSudo=$(sudo -nv 2>&1)
    chkSu=$(su -nv 2>&1)

    if echo "$chkSudo" | grep -q '^sudo:'; then
        echo "sudo"
    elif echo "$chkSu" | grep -q '^su:'; then
        echo "su"
    else
        echo "non"
    fi

}

#After checking echos the right one and assignes the right one the variable.
setSudo(){
    
    suChk=$(sudoCheck)

    case "$suChk" in
        "sudo") echo "sudo" ;;
        "su") echo "su" ;;
        *) exit 1  ;;
    esac
}
export -f setSudo

sftNameRepo(){
    #Variable decleration.
    local searchSwitch="$1"
    local ui=()
    local eui=()
    local searchName=""
    local result=""
    local text=""

    #Bulding the text message for the GUI.
    case $searchSwitch in
        Ss)
            text+="Enter the name of the software you want to search\n"
            text+="in the official repository."
            ;;
        Qi)
            text+="Enter the name of the installed software you want to search\n"
            text+="on your local machine."
            ;;
        Si)
            text+="Enter the name of the software you want to search\n"
            text+="information of. From the repositories."
            ;;
        Qs)
            text+="Enter the name of the software you want to search\n"
            text+="in the local machine."
            ;;
        Qo)
            text+="Enter the name of a file or a software. To find the\n"
            text+="package containing it."
            ;;
        R)
            text+="Enter the name of the software you want to remove\n"
            text+="from your system."
            ;;
        Rnsc)
            text+="Enter the name of the software you want to remove\n"
            text+="from your system with dependensis."
            ;;
        *)
            return 1
            ;;
    esac

    ui=(
        yadRunCmd --form --align-buttons --use-interp --title="Software Name" \
        --text="$text" --field="" --button="Close!gtk-close!Click to close":1 \
        --window-icon=$APP_TOOLBOX_ICON64 --button="Search!gtk-ok!Click to search":0
    )

    eui=(
        yadRunCmd --form --align --use-interp image="error" \
        --text-align=center --text="Software name cannot be empty" \
        --title="Empty Field" --width=300 --buttons-layout=center \
        --window-icon=$APP_TOOLBOX_ICON64 --button="OK!gtk-ok!Click to close."
    )

    #While loop begins. Keeps looping till close is pressed.
    while true; do            
     
    result="$("${ui[@]}")"

    # Now check yad command return code which was
    # delivered by one of the OK and Cancel buttons:
        case $? in
            0)
                # OK button was clicked
                searchName="$(echo "$result" | cut -d '|' -f1)"
                if [ -n "$searchName" ] ; then
                    cmdRun pacman -$searchSwitch $searchName
                    return 0
                else
                    # Show yad window for the error,
                    # then simply continue the loop.
                    "${eui[@]}"
                fi
                ;;
            *)
                # Cancel button was clicked
                return 1
                ;;
        esac
    done
}
export -f sftNameRepo

#Creating the UI using YAD.
mainFunstionSet(){

#Calling the runction to source in all the files and functions needed.    
checkShared

#Local variable assignement.
local handle="$1"
local exitBtn="$?"

#Text for the UI.
local lbl=""    
lbl+="<b>Wlecome to pacmanToolBelt</b>\n"
lbl+="This is simple <b>UI for pacman</b>. It runs some simple commen commands with out typing them in\n"
lbl+="the terminal.\n"

local windowContent=(
    yadRunCmd --form --align-buttons --use-interp --title="Pacman Tool Belt" \
    --text="$lbl" --image=$APP_TOOLBOX_ICON64 --window-icon=$APP_TOOLBOX_ICON64 --columns=3 \
    --button="Close!gtk-close!Close the app.":0
)   

    windowContent+=(
        --field="Update Databases!system-run!Synchronize the databases":fbtn "cmdRun $(setSudo) pacman -Sy"
    )

    windowContent+=(
        --field="Force update Databases!system-run!Force synchornize the databases":fbtn "cmdRun $(setSudo) pacman -Syy"
    )

    windowContent+=(
        --field="System Upgrade!system-run!Synchronize the databases and install updates":fbtn "cmdRun $(setSudo) pacman -Syu"
    )

    windowContent+=(
        --field="System Force Upgrade!system-run!Synchronize the databases and install updates":fbtn "cmdRun $(setSudo) pacman -Syyu"
    )

    windowContent+=(
        --field="Safe System Upgrade for NVIDIA!system-run!Upgrade the system safly if you have NVIDIA":fbtn "cmdRun UpdateInTerminal --lang=$lang"
    )

    windowContent+=(
        --field="Search Software!system-search!Search for the software in the repos":fbtn 'sftNameRepo "Ss"'
    )
    
    windowContent+=(
        --field="Software Information!system-search!Search for software information in the repos":fbtn 'sftNameRepo "Si"'
    )

    windowContent+=(
        --field="Search Installed Software!system-search!Search the local system for installed software.":fbtn "cmdRun $(setSudo) pacman -Qs"
    )

    windowContent+=(
        --field="Installed Software Information!system-search!Search for installed software details.":fbtn 'sftNameRepo "Qi"'
    )

    windowContent+=(
        --field="Find Package With Filename or App!system-search!Finds the package that includes a file or app.":fbtn 'sftNameRepo "Qo"'
    )

    windowContent+=(
        --field="List the Files of the Package!system-search!Lists files of a package.":fbtn 'sftNameRepo "Qi"'
    )

    windowContent+=(
        --field="Softremove An Application!list-remove!Lists files of a package.":fbtn 'sftNameRepo "R"'
    )

    windowContent+=(
        --field="Hardremove An Application!list-remove!Lists files of a package.":fbtn 'sftNameRepo "Rnsc"'
    )

    windowContent+=(
        --field="Clean Sync Databases!document-clear!Lists files of a package.":fbtn 'cmdRun pacman -Scc'
    )

    [ "$handle" != "calculate" ] && "${windowContent[@]}" >& /dev/null &

    [[ $exitBtn -eq 0 ]] && exit 0
}

trap "sleep 0.2 ; eos-kill-yad-zombies --silent" EXIT

mainFunstionSet "$@"

exit 0
